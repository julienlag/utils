#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Long;
$|=1;

my $minSoftClippedSeqLength=10;
my $minAcontent=0.9;

GetOptions ('minClipped=i' => \$minSoftClippedSeqLength,
            'minAcontent=f' => \$minAcontent)
  or die("Error in command line arguments\n");

while (<STDIN>){
	my $line=$_;
	chomp;
	next if($_=~/^\@SQ/); #skip sequence header
	my @line=split "\t";
	next if($line[5] eq '*'); #skip unmapped reads
	my @cigarNumbers=split (/[A-Z]/,$line[5]);
	my @cigarLetters=split(/\d+/,$line[5]);
	shift(@cigarLetters); #the first element is empty, remove it
	#check if there's any soft-clipped sequence at the end(s) of the read (i.e. unmapped tail)
	if($cigarLetters[0] eq 'S' && $cigarNumbers[0] > $minSoftClippedSeqLength){ #tail is likely at the beginning of the read
		my $tailSeq=substr($line[9], 0, $cigarNumbers[0]);
		#there might be an exogenous sequence adapter at the end of the sequence.
		my $beginTailSeq=substr($tailSeq, length($tailSeq)-$minSoftClippedSeqLength, $minSoftClippedSeqLength);
		my @processAs=countAs($beginTailSeq);
		my $countAs=$processAs[0];
		my $strand=$processAs[1];
		if($countAs / length($beginTailSeq) >= $minAcontent){
			my $start=$line[3]-1;
			print "$line[2]\t$start\t$line[3]\t$line[0]\t$countAs\t$strand\n";
			next; # found, no need to look at the other end of the read
		}
	}

	if($cigarLetters[$#cigarLetters] eq 'S' && $cigarNumbers[$#cigarNumbers] > $minSoftClippedSeqLength){ #tail is likely at the end of the read
	# no ELSIF!!

		my $tailSeq=substr($line[9], length($line[9]) - $cigarNumbers[$#cigarNumbers], $cigarNumbers[$#cigarNumbers]);
		#there might be an exogenous sequence adapter at the end of the sequence.
		my $beginTailSeq=substr($tailSeq, 0, $minSoftClippedSeqLength);
		my @processAs=countAs($beginTailSeq);
		my $countAs=$processAs[0];
		my $strand=$processAs[1];
		if($countAs / length($beginTailSeq) >= $minAcontent){
			#calculate where the start of the tail is on the genome
			my $genomicLength=0;
			for (my $i=0; $i<=$#cigarLetters;$i++){
				if($cigarLetters[$i] =~ /[MDNXP]/){
					$genomicLength+=$cigarNumbers[$i];
				}
			}
			my $start=$line[3]+$genomicLength-1;
			my $end=$start+1;
			print "$line[2]\t$start\t$end\t$line[0]\t$countAs\t$strand\n";
		}


	}

	#check if there's any polyA or polyT stretch at one of the ends of the read


}


sub countAs{
	my $seq=$_[0];
	my $cntAs=0;
	my $strand;
	if($seq=~s/A/A/g){
		$cntAs=($seq=~s/A/A/g);
	}
	my $cntTs=0;
	if($seq=~s/T/T/g){
		$cntTs=($seq=~s/T/T/g);
	}
	if($cntAs >= $cntTs){
		$strand='+';
		return ($cntAs, $strand);
	}
	else{
		$strand='-';
		return ($cntTs, $strand);
	}
}
